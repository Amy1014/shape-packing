vec4 interpolate_tricubic(sampler3D tex, vec3 tex_size, vec3 pos) {

	pos.x *= tex_size.x ;
	pos.y *= tex_size.y ;
	pos.z *= tex_size.z ;
	vec3 pos_grid = pos - vec3(0.5,0.5,0.5) ;
	vec3 index = vec3(floor(pos_grid.x),floor(pos_grid.y),floor(pos_grid.z)) ;
	vec3 frac = pos_grid - index ;
	
	vec3 w0, w1, w2, w3 ;
	vec3 one_frac = vec3(1.0-frac.x,1.0-frac.y,1.0-frac.z) ;
	w0 = 1.0/6.0 * one_frac*one_frac*one_frac ;
	w1 = 2.0/3.0 - 0.5 * frac*frac*(2.0-frac) ;
	w2 = 2.0/3.0 - 0.5 * one_frac*one_frac*(2.0-one_frac) ;
	w3 = 1.0/6.0 * frac*frac*frac ;
	
	vec3 g0 = w0 + w1 ;
	vec3 g1 = w2 + w3 ;
	vec3 h0 = (w1 / g0) - 0.5 + index ; // h0 = w1/g0 - 1, move from [-0.5, extent-0.5] to [0, extent]
	vec3 h1 = (w3 / g1) + 1.5 + index ; // h1 = w3/g1 + 1, move from [-0.5, extent-0.5] to [0, extent]
	h0.x /= tex_size.x ;
	h0.y /= tex_size.y ;
	h0.z /= tex_size.z ;
	h1.x /= tex_size.x ;
	h1.y /= tex_size.y ;
	h1.z /= tex_size.z ;
	
	// fetch the eight linear interpolations
	// weighting and fetching is interleaved for performance and stability reasons
	
	vec4 tex000 = texture3D(tex, vec3(h0.x, h0.y, h0.z)) ;
	vec4 tex100 = texture3D(tex, vec3(h1.x, h0.y, h0.z)) ;
	tex000 = mix(tex100, tex000, g0.x) ;  //weigh along the x-direction
	vec4 tex010 = texture3D(tex, vec3(h0.x, h1.y, h0.z)) ;
	vec4 tex110 = texture3D(tex, vec3(h1.x, h1.y, h0.z)) ;
	tex010 = mix(tex110, tex010, g0.x) ;  //weigh along the x-direction
	tex000 = mix(tex010, tex000, g0.y) ;  //weigh along the y-direction
	
	vec4 tex001 = texture3D(tex, vec3(h0.x, h0.y, h1.z)) ;
	vec4 tex101 = texture3D(tex, vec3(h1.x, h0.y, h1.z)) ;
	tex001 = mix(tex101, tex001, g0.x) ;  //weigh along the x-direction
	vec4 tex011 = texture3D(tex, vec3(h0.x, h1.y, h1.z)) ;
	vec4 tex111 = texture3D(tex, vec3(h1.x, h1.y, h1.z)) ;
	tex011 = mix(tex111, tex011, g0.x) ;  //weigh along the x-direction
	tex001 = mix(tex011, tex001, g0.y) ;  //weigh along the y-direction
	
	return mix(tex001, tex000, g0.z) ;  //weigh along the z-direction
}

